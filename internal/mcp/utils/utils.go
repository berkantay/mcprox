package utils

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"unicode"

	"github.com/getkin/kin-openapi/openapi3"
)

// SanitizePathForToolID converts an OpenAPI path to a valid tool ID
func SanitizePathForToolID(path, method string) string {
	// Replace path parameters with snake_case names
	sanitized := strings.ReplaceAll(path, "{", "")
	sanitized = strings.ReplaceAll(sanitized, "}", "")
	sanitized = strings.ReplaceAll(sanitized, "/", "_")
	sanitized = strings.ReplaceAll(sanitized, "-", "_")

	// Remove leading underscore if present
	sanitized = strings.TrimPrefix(sanitized, "_")

	// Add method prefix with snake_case
	return fmt.Sprintf("%s_%s", strings.ToLower(method), strings.ToLower(sanitized))
}

// SanitizeParamName converts an OpenAPI parameter name to a valid Python variable name
func SanitizeParamName(name string) string {
	// Replace hyphens with underscores
	name = strings.ReplaceAll(name, "-", "_")
	// Replace any other invalid characters
	name = strings.Map(func(r rune) rune {
		if unicode.IsLetter(r) || unicode.IsDigit(r) || r == '_' {
			return r
		}
		return '_'
	}, name)
	return name
}

// SanitizeForPackageName sanitizes a string to be used as a package name
func SanitizeForPackageName(name string) string {
	// Convert to lowercase and replace spaces with underscores
	name = strings.ToLower(name)
	name = strings.ReplaceAll(name, " ", "_")

	// Replace invalid characters with underscores
	name = strings.Map(func(r rune) rune {
		if unicode.IsLetter(r) || unicode.IsDigit(r) || r == '_' {
			return r
		}
		return '_'
	}, name)

	// Ensure it starts with a letter
	if len(name) > 0 && !unicode.IsLetter(rune(name[0])) {
		name = "mcp_" + name
	}

	return name
}

// GenerateRequirements writes the Python package requirements to a file
func GenerateRequirements(filePath string) error {
	requirements := `mcp-sdk>=0.1.0
httpx>=0.25.0
`
	return os.WriteFile(filePath, []byte(requirements), 0644)
}

// GeneratePyprojectToml generates a pyproject.toml file for the project
func GeneratePyprojectToml(filePath string, doc *openapi3.T) error {
	projectName := SanitizeForPackageName(doc.Info.Title)
	if projectName == "" {
		projectName = "mcp_server"
	}

	content := fmt.Sprintf(`[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "%s"
version = "%s"
authors = [
    {name = "Generated by mcprox", email = "berkantay.5@gmail.com"},
]
description = "Model Context Protocol (MCP) server generated from OpenAPI specs"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "mcp",
    "httpx",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "black",
    "ruff",
]

[project.urls]
"Homepage" = "https://github.com/berkantay/mcprox"
"Bug Tracker" = "https://github.com/berkantay/mcprox/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.black]
line-length = 100
target-version = ["py311"]
`, projectName, doc.Info.Version)

	return os.WriteFile(filePath, []byte(content), 0644)
}

// GenerateGitignore generates a .gitignore file for the project
func GenerateGitignore(filePath string) error {
	content := `# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
.env
.venv
venv/
ENV/
.uv/

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
`
	return os.WriteFile(filePath, []byte(content), 0644)
}

// GenerateReadme generates a README.md file for the project
func GenerateReadme(filePath string, doc *openapi3.T) error {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("# %s MCP Server\n\n", doc.Info.Title))
	sb.WriteString(fmt.Sprintf("This is an auto-generated Model Context Protocol (MCP) server for %s (version %s).\n\n", doc.Info.Title, doc.Info.Version))

	sb.WriteString("## Description\n\n")
	sb.WriteString(doc.Info.Description)
	sb.WriteString("\n\n")

	sb.WriteString("## Installation\n\n")
	sb.WriteString("### Using uv (recommended)\n\n")
	sb.WriteString("This project uses [uv](https://astral.sh/uv) for dependency management and virtual environments.\n\n")

	sb.WriteString("1. Install uv (if not already installed):\n")
	sb.WriteString("   ```bash\n")
	sb.WriteString("   curl -LsSf https://astral.sh/uv/install.sh | sh\n")
	sb.WriteString("   ```\n\n")

	sb.WriteString("2. Run the setup script:\n")
	sb.WriteString("   ```bash\n")
	sb.WriteString("   # On Unix/Linux/MacOS\n")
	sb.WriteString("   ./scripts/setup.sh\n")
	sb.WriteString("   \n")
	sb.WriteString("   # On Windows\n")
	sb.WriteString("   scripts\\setup.bat\n")
	sb.WriteString("   ```\n\n")

	sb.WriteString("3. Activate the virtual environment:\n")
	sb.WriteString("   ```bash\n")
	sb.WriteString("   # On Unix/Linux/MacOS\n")
	sb.WriteString("   source .venv/bin/activate\n")
	sb.WriteString("   \n")
	sb.WriteString("   # On Windows\n")
	sb.WriteString("   .venv\\Scripts\\activate.bat\n")
	sb.WriteString("   ```\n\n")

	sb.WriteString("### Using pip\n\n")
	sb.WriteString("Alternatively, you can use pip:\n\n")

	sb.WriteString("1. Create a virtual environment:\n")
	sb.WriteString("   ```bash\n")
	sb.WriteString("   python -m venv .venv\n")
	sb.WriteString("   ```\n\n")

	sb.WriteString("2. Activate the virtual environment:\n")
	sb.WriteString("   ```bash\n")
	sb.WriteString("   # On Unix/Linux/MacOS\n")
	sb.WriteString("   source .venv/bin/activate\n")
	sb.WriteString("   \n")
	sb.WriteString("   # On Windows\n")
	sb.WriteString("   .venv\\Scripts\\activate.bat\n")
	sb.WriteString("   ```\n\n")

	sb.WriteString("3. Install dependencies:\n")
	sb.WriteString("   ```bash\n")
	sb.WriteString("   pip install -e .\n")
	sb.WriteString("   ```\n\n")

	sb.WriteString("## Running the Server\n\n")
	sb.WriteString("You can run the server using the provided script:\n\n")
	sb.WriteString("```bash\n")
	sb.WriteString("python scripts/run.py\n")
	sb.WriteString("```\n\n")

	sb.WriteString("Or directly:\n\n")
	sb.WriteString("```bash\n")
	sb.WriteString("python src/mcp_server.py\n")
	sb.WriteString("```\n\n")

	sb.WriteString("## Configuration\n\n")
	sb.WriteString("Set the following environment variables to configure the server:\n\n")
	sb.WriteString("- `SERVICE_URL`: The base URL of the service to proxy (default: http://localhost:8080)\n")
	sb.WriteString("- `PORT`: The port to run the MCP server on (default: 8000)\n\n")

	sb.WriteString("## License\n\n")
	sb.WriteString("MIT\n")

	return os.WriteFile(filePath, []byte(sb.String()), 0644)
}

// GenerateSetupScripts generates setup scripts for the project
func GenerateSetupScripts(outputDir string) error {
	// Generate setup.sh (for Unix-based systems)
	setupShPath := filepath.Join(outputDir, "scripts", "setup.sh")
	setupShContent := `#!/bin/bash
# Setup script for MCP server

# Check if uv is installed
if ! command -v uv &> /dev/null; then
    echo "uv not found, installing..."
    curl -LsSf https://astral.sh/uv/install.sh | sh
fi

# Create virtual environment and install dependencies
cd "$(dirname "$0")/.."
uv venv
source .venv/bin/activate
uv add mcp[cli]
uv sync
echo "Setup complete. Run 'source .venv/bin/activate' to activate the environment."
`
	if err := os.WriteFile(setupShPath, []byte(setupShContent), 0755); err != nil {
		return fmt.Errorf("failed to generate setup.sh: %w", err)
	}

	// Generate setup.bat (for Windows)
	setupBatPath := filepath.Join(outputDir, "scripts", "setup.bat")
	setupBatContent := `@echo off
REM Setup script for MCP server

REM Check if uv is installed
where uv >nul 2>nul
if %ERRORLEVEL% neq 0 (
    echo uv not found, please install it manually from https://astral.sh/uv
    exit /b 1
)

REM Create virtual environment and install dependencies
cd %~dp0\..
uv venv
uv pip install -e .
echo Setup complete. Run '.venv\Scripts\activate.bat' to activate the environment.
`
	if err := os.WriteFile(setupBatPath, []byte(setupBatContent), 0644); err != nil {
		return fmt.Errorf("failed to generate setup.bat: %w", err)
	}

	// Generate run script
	runScriptPath := filepath.Join(outputDir, "scripts", "run.py")
	runScriptContent := `#!/usr/bin/env python3
"""
Run script for MCP server.
"""
import os
import sys
import subprocess

def main():
    """Run the MCP server."""
    # Get the project root directory
    project_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    
    # Check if virtual environment exists
    venv_dir = os.path.join(project_dir, ".venv")
    if not os.path.exists(venv_dir):
        print("Virtual environment not found. Running setup...")
        setup_script = os.path.join(project_dir, "scripts", "setup.sh")
        if os.name == "nt":  # Windows
            setup_script = os.path.join(project_dir, "scripts", "setup.bat")
        
        subprocess.call(setup_script, shell=True)
    
    # Run the MCP server
    server_script = os.path.join(project_dir, "src", "mcp_server.py")
    
    # Determine python command (use venv python if available)
    python_cmd = "python"
    if os.name == "nt":  # Windows
        python_path = os.path.join(venv_dir, "Scripts", "python.exe")
    else:  # Unix-like
        python_path = os.path.join(venv_dir, "bin", "python")
    
    if os.path.exists(python_path):
        python_cmd = python_path
    
    # Run the server
    subprocess.call([python_cmd, server_script])

if __name__ == "__main__":
    main()
`
	if err := os.WriteFile(runScriptPath, []byte(runScriptContent), 0755); err != nil {
		return fmt.Errorf("failed to generate run.py: %w", err)
	}

	return nil
}

// GenerateInitFiles generates __init__.py files for Python package structure
func GenerateInitFiles(outputDir string) error {
	initFiles := []string{
		filepath.Join(outputDir, "src", "__init__.py"),
		filepath.Join(outputDir, "tests", "__init__.py"),
	}

	for _, file := range initFiles {
		if err := os.WriteFile(file, []byte("# Auto-generated by mcprox\n"), 0644); err != nil {
			return fmt.Errorf("failed to create __init__.py file at %s: %w", file, err)
		}
	}

	return nil
}
